// <auto-generated />
using System;
using Financeiro.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Financeiro.Data.Migrations
{
    [DbContext(typeof(FinanceiroContext))]
    partial class FinanceiroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Financeiro.Domain.Entidades.CentroCusto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DtAtualizacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DtAtualizacao");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DtCadastro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("CentroCusto");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.ContaFinanceira", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DtAtualizacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DtAtualizacao");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DtCadastro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("ContaFinanceira");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DtAtualizacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DtAtualizacao");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DtCadastro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.ItemMovimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CentroCustoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChaveLancamento")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ChaveLancamento");

                    b.Property<DateTime?>("DtAtualizacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DtAtualizacao");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DtCadastro");

                    b.Property<string>("Historico")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Historico");

                    b.Property<Guid>("MovimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumeroParcela")
                        .HasColumnType("int")
                        .HasColumnName("NumeroParcela");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PessoaPagadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalParcela")
                        .HasColumnType("int")
                        .HasColumnName("TotalParcela");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Valor");

                    b.HasKey("Id");

                    b.HasIndex("CentroCustoId");

                    b.HasIndex("MovimentoId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("PessoaPagadorId");

                    b.ToTable("ItemMovimento");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Movimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CentroCustoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataMovimento")
                        .HasColumnType("datetime")
                        .HasColumnName("DataMovimento");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("datetime")
                        .HasColumnName("DataVencimento");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Descricao");

                    b.Property<DateTime?>("DtAtualizacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DtAtualizacao");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DtCadastro");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPago")
                        .HasColumnType("bit")
                        .HasColumnName("IsPago");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Observacao");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PessoaPagadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TipoMovimento")
                        .HasColumnType("int")
                        .HasColumnName("TipoMovimento");

                    b.Property<decimal>("ValorMovimento")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorMovimento");

                    b.HasKey("Id");

                    b.HasIndex("CentroCustoId");

                    b.HasIndex("ContaId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("PessoaId");

                    b.HasIndex("PessoaPagadorId");

                    b.ToTable("Movimentos");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DtAtualizacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DtAtualizacao");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DtCadastro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Pessoas");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.PessoaCentroCusto", b =>
                {
                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CentroCustoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValorMensal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ValorMensal");

                    b.HasKey("PessoaId", "CentroCustoId");

                    b.HasIndex("CentroCustoId");

                    b.ToTable("PessoaCentroCusto");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime?>("DtAtualizacao")
                        .HasColumnType("datetime")
                        .HasColumnName("DtAtualizacao");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnType("datetime")
                        .HasColumnName("DtCadastro");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Login");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RefreshToken");

                    b.Property<byte[]>("Senha")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Senha");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.ItemMovimento", b =>
                {
                    b.HasOne("Financeiro.Domain.Entidades.CentroCusto", "CentroCusto")
                        .WithMany("ItemMovimentos")
                        .HasForeignKey("CentroCustoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Financeiro.Domain.Entidades.Movimento", "Movimento")
                        .WithMany("ItensMovimentos")
                        .HasForeignKey("MovimentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Financeiro.Domain.Entidades.Pessoa", "Pessoa")
                        .WithMany("ItensMovimentos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Financeiro.Domain.Entidades.Pessoa", "PessoaPagador")
                        .WithMany("ItensMovimentosPagador")
                        .HasForeignKey("PessoaPagadorId");

                    b.Navigation("CentroCusto");

                    b.Navigation("Movimento");

                    b.Navigation("Pessoa");

                    b.Navigation("PessoaPagador");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Movimento", b =>
                {
                    b.HasOne("Financeiro.Domain.Entidades.CentroCusto", "CentroCusto")
                        .WithMany("Movimentos")
                        .HasForeignKey("CentroCustoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Financeiro.Domain.Entidades.ContaFinanceira", "Conta")
                        .WithMany("Movimentos")
                        .HasForeignKey("ContaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Financeiro.Domain.Entidades.Fornecedor", "Fornecedor")
                        .WithMany("Movimentos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Financeiro.Domain.Entidades.Pessoa", "Pessoa")
                        .WithMany("Movimentos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Financeiro.Domain.Entidades.Pessoa", "PessoaPagador")
                        .WithMany("MovimentosPagador")
                        .HasForeignKey("PessoaPagadorId");

                    b.Navigation("CentroCusto");

                    b.Navigation("Conta");

                    b.Navigation("Fornecedor");

                    b.Navigation("Pessoa");

                    b.Navigation("PessoaPagador");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.PessoaCentroCusto", b =>
                {
                    b.HasOne("Financeiro.Domain.Entidades.CentroCusto", "CentroCusto")
                        .WithMany("PessoaCentroCustos")
                        .HasForeignKey("CentroCustoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Financeiro.Domain.Entidades.Pessoa", "Pessoa")
                        .WithMany("PessoaCentroCustos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentroCusto");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.CentroCusto", b =>
                {
                    b.Navigation("ItemMovimentos");

                    b.Navigation("Movimentos");

                    b.Navigation("PessoaCentroCustos");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.ContaFinanceira", b =>
                {
                    b.Navigation("Movimentos");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Fornecedor", b =>
                {
                    b.Navigation("Movimentos");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Movimento", b =>
                {
                    b.Navigation("ItensMovimentos");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Pessoa", b =>
                {
                    b.Navigation("ItensMovimentos");

                    b.Navigation("ItensMovimentosPagador");

                    b.Navigation("Movimentos");

                    b.Navigation("MovimentosPagador");

                    b.Navigation("PessoaCentroCustos");
                });
#pragma warning restore 612, 618
        }
    }
}
